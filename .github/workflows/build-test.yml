name: Build-Test

on:
  workflow_dispatch:
    inputs:
      device:
        description: 'Select device to build'
        required: true
        default: 'd1'
        type: choice
        options:
          - d1
          - d1xks
          - d2s
          - d2x

jobs:
  build:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        include:
          - device: ${{ github.event.inputs.device }}
    steps:
      - name: "‚è∞Set Time Zone to Asia"
        run: |
          sudo timedatectl set-timezone "Asia/Jakarta"

      - name: "üöÑSet up build environment"
        run: |
          sudo apt-get update
          sudo apt-get install -y git-core flex bison build-essential zip curl \
          zlib1g-dev libc6-dev-i386 lib32z1-dev unzip

      - name: "‚≠êCheckout repository with submodules"
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Update submodules
        run: |
          git submodule update --init --recursive
          git submodule update --remote

      - name: "üí° Setup KernelSu"
        run: |
          if [ -d "./KernelSU-Next" ]; then rm -rf "./KernelSU-Next"; fi
          if [ -d "./drivers/KernelSU-Next" ]; then rm -rf "./drivers/KernelSU-Next"; fi 
          curl -LSs "https://raw.githubusercontent.com/Star-Seven/KernelSU-Next/next/kernel/setup.sh" | bash -

      - name: "üîç Check KernelSU Version Compatibility"
        run: |
          echo "Checking KernelSU version and compatibility..."
          if [ -d "KernelSU-Next" ]; then
            cd KernelSU-Next
            git log --oneline -5
            cd ..
          fi

      - name: "üòÑ Setup and Apply susfs4ksu Patches (with fallback)"
        run: |
          set -e
          
          # Clone susfs4ksu repository
          git clone https://github.com/Star-Seven/susfs4ksu -b M62-backport-1.5.9 susfs4ksu-repo
          
          # Backup original files that will be patched
          echo "Backing up files that will be patched..."
          cp -r kernel kernel_backup
          cp -r fs fs_backup
          cp -r include include_backup
          
          # Copy patches
          #cp susfs4ksu-repo/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU-Next/
          cp susfs4ksu-repo/kernel_patches/fs/* fs/
          cp susfs4ksu-repo/kernel_patches/include/linux/* include/linux/
          
          # Apply patch with more tolerant settings
          #cd ./KernelSU-Next
          #echo "Applying KernelSU patch with more tolerance..."
          #patch -p1 -l -F 10 < 10_enable_susfs_for_ksu.patch || {
          #  echo "Patch partially applied. Checking for reject files..."
          #  find . -name "*.rej" -exec echo "Reject file found: {}" \;
          #}
          cd ..
          
          # Apply main kernel patch
          echo "Applying main susfs4ksu patch..."
          patch -p1 -l -F 10 < susfs4ksu-repo/kernel_patches/50_add_susfs_in_kernel-4.14.patch || {
            echo "Main patch partially applied. Checking for reject files..."
            find . -name "*.rej" -exec echo "Reject file found: {}" \;
          }
          
          echo "Patch application completed (with possible partial success)"

#      - name: "üîß Manual Patch Resolution (if needed)"
#        run: |
#          # Check for reject files and attempt manual resolution
#          if find . -name "*.rej" | grep -q .; then
#            echo "Found reject files. Attempting manual resolution..."
#            
#            # For core_hook.c - usually the most critical
#            if [ -f "KernelSU-Next/kernel/core_hook.c.rej" ]; then
#              echo "Manual resolution needed for core_hook.c"
#              # Anda perlu memeriksa manual file .rej ini
#            fi
#            
#            # Continue build anyway for testing
#            echo "Continuing build despite patch issues..."
#          else
#            echo "No reject files found - patches applied successfully!"
#          fi
#
      - name: "üêéBuild for specific device"
        run: ./build.sh -m ${{ matrix.device }} -k Y -r N

      - name: "üí´Prepare ZIP files for upload"
        run: |
          mkdir -p ${{ github.workspace }}/build/out/zip_files
          find ${{ github.workspace }}/build/out/ -type f -name "*.zip" -exec cp {} ${{ github.workspace }}/build/out/zip_files/ \;

      - name: "üòéUpload ZIP files as artifact"
        uses: actions/upload-artifact@v4
        with:
          name: "ExtremeKRNL-Nexus-Susfs-${{ matrix.device }}"
          path: ${{ github.workspace }}/build/out/zip_files/

  no-release:
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: "üîí Prevent automatic release"
        run: |
          echo "Build completed successfully. No automatic release will be created."
          echo "Artifacts are available in the Actions tab for manual download."